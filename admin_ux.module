<?php

/**
 * @file admin_ux.module
 * TODO: Enter file description here.
 */

if (module_exists('admin_views')) {
  module_load_include('inc', 'admin_ux', 'includes/admin_ux.admin_views');
}
if (module_exists('block')) {
  module_load_include('inc', 'admin_ux', 'includes/admin_ux.block');
}
if (module_exists('diff')) {
  module_load_include('inc', 'admin_ux', 'includes/admin_ux.diff');
}
if (module_exists('file_entity')) {
  module_load_include('inc', 'admin_ux', 'includes/admin_ux.file_entity');
}
if (module_exists('media')) {
  module_load_include('inc', 'admin_ux', 'includes/admin_ux.media');
}

/**
 * Implements hook_init().
 *
 * For whatever reason hook_page_build() wont include files when overlay is loaded.
 */
function admin_ux_init() {
  global $theme_info;

  // Fix various UX issues in the administration theme.
  if ($theme_info->name == variable_get('admin_theme')) {
    drupal_add_css(drupal_get_path('module', 'admin_ux') . '/css/admin_ux.admin.css');
    if (module_exists('chosen')) {
      drupal_add_js(drupal_get_path('module', 'admin_ux') . '/js/admin_ux.chosen.js');
    }

    switch ($theme_info->name) {
      case 'adminimal':
        drupal_add_css(drupal_get_path('module', 'admin_ux') . '/css/admin_ux.adminimal.css');
        break;
      case 'shiny':
        drupal_add_css(drupal_get_path('module', 'admin_ux') . '/css/admin_ux.shiny.css');
        break;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function admin_ux_form_node_form_alter(&$form, &$form_state) {
  // Move publishing options to the first (visible) tab.
  $form['options']['#weight'] = -3;

  if (module_exists('metatag')) {
    module_load_include('inc', 'admin_ux', 'includes/admin_ux.metatag');
    _admin_ux_metatag_description($form, $form_state);
  }
  if (module_exists('redirect')) {
    module_load_include('inc', 'admin_ux', 'includes/admin_ux.redirect');
    _admin_ux_redirect_outgoing($form, $form_state);
  }
}

/**
 * Implements hook_ux_css_alter().
 *
 * Remove the request for viewfield.css as it doesnt exist, the white-space fix
 * exists in admin_ux.admin.css.
 */
function admin_ux_css_alter(&$css) {
  $exclude = array(
    'sites/all/modules/contrib/viewfield/viewfield.css' => FALSE,
  );
  $css = array_diff_key($css, $exclude);
}

/**
 * Implements template_preprocess_taxonomy_overview_vocabularies().
 */
function admin_ux_preprocess_taxonomy_overview_vocabularies(&$variables) {
  $form = &$variables['form'];
  foreach (element_children($form) as $key) {
    if (isset($form[$key]['name'])) {
      $vocabulary = &$form[$key];
      $vocabulary['name']['#markup'] .= '<br /><small>' . $vocabulary['#vocabulary']->description . '</small>';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Display a summary of the view in the edit form.
 */
function admin_ux_form_views_ui_edit_form_alter(&$form, &$form_state) {
  $view = $form_state['view'];
  $display_summary = '';

  $matches = admin_ux_views_usage($view->name);
  $usage = array(
    '#theme' => 'item_list',
    '#items' => $matches,
  );

  $form['view_usage'] = array(
    '#type' => 'fieldset',
    '#title' => t('View usage'),
    '#description' => t('Currently only displayes viewfield usage.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => -4,
    'matches' => $usage,
  );

  $display_summary .= '<dl>';
  foreach ($view->display as $display) {
    $disabled = isset($display->display_options['enabled']) && !$display->display_options['enabled'] ? ' <small>(' . t('Disabled') . ')</small>' : '';
    $display_summary .= '<dt><em>' . $display->display_title . $disabled . '</em></dt><dd>' . (isset($display->display_options['display_description']) ? $display->display_options['display_description'] : '') . '</dd>';
  }
  $display_summary .= '</dl>';

  $form['summary'] = array(
    '#title' => t('View: @name', array('@name' => $view->human_name)),
    '#description' => $view->description,
    '#weight' => -5,
    '#collapsible' => TRUE,
    '#type' => 'fieldset',
  );
  $form['summary'][] = array('#markup' => $display_summary);
}

/**
 * Return a list of views usage.
 */
function admin_ux_views_usage($view) {
  $matches = array();
  if (module_exists('viewfield')) {
    $matches = array_merge($matches, admin_ux_views_usage_viewfield($view));
  }
  return $matches;
}

/**
 * Return views usage based on viewfield instances.
 */
function admin_ux_views_usage_viewfield($view) {
  $fields = field_info_field_map();
  $entity_loads = array();
  $instance_options = array();
  $matches = array();
  foreach ($fields as $field_name => $field) {
    if ($field['type'] == 'viewfield') {
      $table_name = 'field_data_' . $field_name;
      $items = db_select($table_name, 'v')
        ->fields('v', array('entity_type', 'entity_id', "{$field_name}_vname", "{$field_name}_vargs"))
        ->condition("{$field_name}_vname", db_like($view) . '|%', 'LIKE')
        ->execute()
        ->fetchAll();

      foreach ($items as $item) {
        list(,$display_name) = explode('|', $item->{"{$field_name}_vname"});
        $args = $item->{"{$field_name}_vargs"};
        $entity_loads[$item->entity_type][] = $item->entity_id;
        $instance_options[$item->entity_type][$item->entity_id][] = $display_name . ': "' . $args . '"';
      }
    }
  }

  foreach ($entity_loads as $entity_type => $ids) {
    // In case of nodes with a default value.
    if (count($ids) > 20) {
      $label = $entity_type . ' (' . t('Too many to load') . ')';
      $matches[] = $label;
      continue;
    }
    $entities = entity_load($entity_type, $ids);
    foreach ($entities as $id => $entity) {
      $uri = entity_uri($entity_type, $entity);
      $options = $instance_options[$entity_type][$id];
      $label = $entity_type . ' # ' . $id;
      $suffix = ' (' . implode(', ', $options) . ')';
      $matches[] = l($label, $uri['path']) . $suffix;
    }
  }
  return $matches;
}

/**
 * Implements hook_module_implements_alter().
 */
function admin_ux_module_implements_alter(&$implementations, $hook) {
  // We need to be able to override i18n_block.
  if ($hook == 'form_alter' && isset($implementations['admin_ux'])) {
    $group = $implementations['admin_ux'];
    unset($implementations['admin_ux']);
    $implementations['admin_ux'] = $group;
  }
}
